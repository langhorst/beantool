#!/usr/bin/env ruby

require 'optparse'
require 'beanstalk-client'

class BeanTool
  NAME = 'BeanTool'
  VERSION = '0.1'

  def self.version 
    [NAME, VERSION].join(' ') 
  end

  def initialize(addrs)
    @pool = Beanstalk::Pool.new(addrs) 
  end

  def list_tubes
    a = build_header('Tubes')
    @pool.list_tubes.each do |host, tubes|
      a << host
      tubes.each do |tube|
        a << "\t" + tube
      end
    end
    return a.join("\n")
  end

  def peek(tube)
    a = build_header("#{tube} Peek")
    @pool.use(tube)
    job = { :id => 123, :body => 'test message' }
    @pool.put(job)
    @pool.watch(tube)
    a << @pool.peek_ready.to_s
    return a.join("\n")
  end

  def purge(tube)
    a = build_header("#{tube} Purge")
    @pool.watch(tube)
    while !@pool.peek_ready.nil?
      job = @pool.reserve
      a << job.to_s
      job.delete
    end
    return a.join("\n")
  end

  def raw_stats
    a = build_header('Raw Stats')
    raw_stats = @pool.raw_stats
    raw_stats.each do |host, stats|
      a << host
      build_stats(stats).each { |s| a << "\t" + s } 
    end
    return a.join("\n")
  end

  def stats
    a = build_header('Stats')
    a << build_stats(@pool.stats)
    return a.flatten.join("\n")
  end

  def tube_stats(tube)
    a = build_header("#{tube} Tube Stats")
    a << build_stats(@pool.stats_tube(tube))
    return a.flatten.join("\n")
  end

  def tube_stats_raw(tube)
    a = build_header("#{tube} Raw Tube Stats")
    raw_stats = @pool.raw_stats_tube(tube)
    raw_stats.each do |host, stats|
      a << host
      build_stats(stats).each { |s| a << "\t" + s }
    end
    return a.join("\n")
  end
  
  def version
    BeanTool.version
  end

  private

  def build_header(title)
    a = Array.new
    a << title
    a << '-'*title.size
    return a
  end

  def build_stats(stats)
    a = Array.new
    stats.keys.sort.each { |k| a << "#{k}: #{stats[k]}" }
    return a
  end
end

options = Hash.new
beanfile = File.join(ENV['HOME'], '.beantool')
options[:addrs] = File.exist?(beanfile) ? IO.readlines(beanfile) : Array.new

OptionParser.new do |opts|
  opts.banner = "Usage: beantool [options]"

  opts.on("-a", "--address [ADDRESS]", "Beanstalkd address") do |addr|
    options[:addrs] ||= Array.new
    options[:addrs] << addr
  end
  opts.on("-p", "--peek [tube]", "Peek tube") { |o| options[:peek] = o }
  opts.on("-l", "--list-tubes", "List tubes") { |o| options[:list] = true }
  opts.on("-P", "--purge [tube]", "Purge tube") { |o| options[:purge] = o }
  opts.on("-S", "--raw-stats", "Raw stats") { |o| options[:raw_stats] = true }
  opts.on("-s", "--stats", "Stats") { |o| options[:stats] = true }
  opts.on("-t", "--tube-stats [tube]", "Tube stats") { |o| options[:tube_stats] = o }
  opts.on("-T", "--tube-stats-raw [tube]", "Raw tube stats") { |o| options[:tube_stats_raw] = o }
  opts.on("-v", "--version", "Version") { |o| options[:version] = true } 
end.parse!

beantool = BeanTool.new(options[:addrs])
if options[:peek]
  puts beantool.peek(options[:peek])
end
if options[:list]
  puts beantool.list_tubes
end
if options[:purge]
  puts beantool.purge(options[:purge])
end
if options[:stats]
  puts beantool.stats
end
if options[:raw_stats]
  puts beantool.raw_stats
end
if options[:version]
  puts beantool.version
end
if options[:tube_stats]
  puts beantool.tube_stats(options[:tube_stats])
end
if options[:tube_stats_raw]
  puts beantool.tube_stats_raw(options[:tube_stats_raw])
end

